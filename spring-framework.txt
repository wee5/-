                                                        --------控制反转----------
解释： This process is the inverse of the bean itself controlling the instantiation or location of its dependencies on its own
      by using direct construction of classes or the Service Locator pattern
意译：控制反转指通过直接构造函数或服务定位模式来控制Bean的依赖项的实例化或定位

配置元数据--实例化容器--注册Bean（实例化--依赖注入）

容器------------

Bean-----------
命名Bean：唯一的id，别名name
实例化Bean：构造函数，静态工厂，实例工厂（静态工厂和实例工厂的方法返回值类型不需要和包含该方法的类相同）
确定Bean的运行时类型

依赖关系--------------
依赖注入：
    基于构造函数的依赖注入
        参数解析：参数类型匹配，参数索引，参数名
            若不存在歧义，其依赖项被定义的顺序与其依赖项被提供给其构造函数的顺序一样
            基本类型的参数一般无法按类型匹配，可以显示的指定基本类型的type
            参数索引可以解决基本类型的不确定问题，和相同类型参数的不确定问题
    基于set方法的依赖注入：无参构造方法和无参实例工厂方法实例化，再使用set方法注入依赖
    经验法则：对于强制依赖项使用构造函数注入，对于可选依赖项使用set方法注入
    依赖解析过程
        xml，注释，java配置的元数据用于创建并初始化ApplicationContext容器
        Bean的依赖关系通过属性，构造方法，静态工厂方法的参数表示，这些依赖项会在实际创建Bean时被提供
        每个属性，构造函数参数都是要设置的值的实际定义，或是对另一个Bean的引用
        spring默认可以将字符串转换为所有基本类型
    循环依赖
        通过构造函数注入，可能会出现不可解析的循环依赖
        会抛出BeanCurrentlyInCreationException
        解决方案其一是通过set方法注入依赖，会强制其中一个Bean在完全初始化之前注入另一个Bean
        循环依赖解释：循环依赖如A依赖B，B又依赖A
             假若先实例化A后实例化B，基于构造函数的依赖注入在实例化A时，需要将Bean B作为参数传入A的有参构造函数
             但此时B还未实例化，也未被注册成为Bean，于是打算先实例化B，再讲B注入，就能完成A的实例化了
             由于B依赖A（此时就是循环依赖的矛盾），同理需要先实例化A才能实例化B
        解决方案解释：一直循环下去，A和B都不能被实例化，抛出异常
             set方法通过先实例化B，但B未完全初始化，即B对A的依赖项为空
             此时A可以通过任意方式强制注入B，将B注入A后，再将A注入B
        不存在在循环依赖时，依赖注入之前会将被依赖项完全初始化
        配置问题可见性延迟：若配置出错，容器实例化时不一定会报错，可能会在使用时实例化Bean，并发现问题
更详细的配置
    将value对应的String值转换为属性或参数的实际类型
    p命名空间实现更简洁的xml配置，但设计时不会报错，运行时才会。支持自动完成属性的IDE可以避免此问题，如idea，eclipse
    配置java.util.Properties，利用javaBean PropertiesEditor机制
    Idref作为一种防错机制，使用Idref会让容器在部署时验证引用的Bean是否存在，否则只会在使用到被引用的Bean时才会发现错误， 4.0 beans XSD及之后将idref改为idref bean
    对其他Bean的引用。设置属性之前根据需要初始化它。可以指定Id和Name
    Bean定义中的内部Bean
    collection元素
    集合合并，父子集合
    p命名空间，c命名空间，只存在spring中，不是xml的格式
depends on
懒加载
自动装配，四种模式，no，byName，byType，constructor
方法注入，查找方法注入，任意方法替换
scope作用域

        
        

        
        
        
        
