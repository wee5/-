                                                        --------控制反转----------
解释： This process is the inverse of the bean itself controlling the instantiation or location of its dependencies on its own
      by using direct construction of classes or the Service Locator pattern
意译：控制反转指通过直接构造函数或服务定位模式来控制Bean的依赖项的实例化或定位

配置元数据--实例化容器--注册Bean（实例化--依赖注入）

容器------------

Bean-----------
    命名Bean：唯一的id，别名name
    实例化Bean：构造函数，静态工厂，实例工厂（静态工厂和实例工厂的方法返回值类型不需要和包含该方法的类相同）
    确定Bean的运行时类型

依赖关系--------------
    依赖注入：
        基于构造函数的依赖注入
            参数解析：参数类型匹配，参数索引，参数名
                若不存在歧义，其依赖项被定义的顺序与其依赖项被提供给其构造函数的顺序一样
                基本类型的参数一般无法按类型匹配，可以显示的指定基本类型的type
                参数索引可以解决基本类型的不确定问题，和相同类型参数的不确定问题
        基于set方法的依赖注入：无参构造方法和无参实例工厂方法实例化，再使用set方法注入依赖
        经验法则：对于强制依赖项使用构造函数注入，对于可选依赖项使用set方法注入
        依赖解析过程
            xml，注释，java配置的元数据用于创建并初始化ApplicationContext容器
            Bean的依赖关系通过属性，构造方法，静态工厂方法的参数表示，这些依赖项会在实际创建Bean时被提供
            每个属性，构造函数参数都是要设置的值的实际定义，或是对另一个Bean的引用
            spring默认可以将字符串转换为所有基本类型
        循环依赖
            通过构造函数注入，可能会出现不可解析的循环依赖
            会抛出BeanCurrentlyInCreationException
            解决方案其一是通过set方法注入依赖，会强制其中一个Bean在完全初始化之前注入另一个Bean
            循环依赖解释：循环依赖如A依赖B，B又依赖A
                 假若先实例化A后实例化B，基于构造函数的依赖注入在实例化A时，需要将Bean B作为参数传入A的有参构造函数
                 但此时B还未实例化，也未被注册成为Bean，于是打算先实例化B，再讲B注入，就能完成A的实例化了
                 由于B依赖A（此时就是循环依赖的矛盾），同理需要先实例化A才能实例化B
            解决方案解释：一直循环下去，A和B都不能被实例化，抛出异常
                 set方法通过先实例化B，但B未完全初始化，即B对A的依赖项为空
                 此时A可以通过任意方式强制注入B，将B注入A后，再将A注入B
            不存在在循环依赖时，依赖注入之前会将被依赖项完全初始化
            配置问题可见性延迟：若配置出错，容器实例化时不一定会报错，可能会在使用时实例化Bean，并发现问题
    更详细的配置
        将value对应的String值转换为属性或参数的实际类型
        p命名空间实现更简洁的xml配置，但设计时不会报错，运行时才会。支持自动完成属性的IDE可以避免此问题，如idea，eclipse
        配置java.util.Properties，利用javaBean PropertiesEditor机制
        Idref作为一种防错机制，使用Idref会让容器在部署时验证引用的Bean是否存在，否则只会在使用到被引用的Bean时才会发现错误， 4.0 beans XSD及之后将idref改为idref bean
        对其他Bean的引用。设置属性之前根据需要初始化它。可以指定Id和Name
        Bean定义中的内部Bean
        collection元素
        集合合并，父子集合
        p命名空间，c命名空间，只存在spring中，不是xml的格式
    depends on
    懒加载
    自动装配，四种模式，no，byName，byType，constructor
    方法注入，查找方法注入，任意方法替换

scope作用域---------
    单例作用域：整个IoC容器对单例Bean类型的使用都是同一对象
    原型作用域：每次使用原型Bean类型都是新对象，容器不会回调其销毁方法
    依赖原型Bean的单例Bean：单例Bean只会实例化一次，希望单例作用域bean在运行时重复获取原型作用域bean的新实例？
    request,session,application,websocket scope：只能在web感知的容器实现类中才能使用
        初始化web配置
        请求作用域：LoginAction
        会话作用域：UserPreferences
        应用作用域：AppPreferences
        Scoped Beans as Dependencies
    自定义作用域
    线程作用域：默认不会注册
    生命周期和Bean的作用域的关系？
        在Bean的作用于对应的生命周期中，每次使用到Bean类型都是同一对象；Bean随着该生命周期的销毁而销毁
    单例作用域与单例模式的区别？
        单例作用域指在一个Ioc容器中，每次使用单例Bean类型都会是同一个对象
    单例作用域与原型作用域的选择？
        经验法则：对所有有状态bean使用原型作用域，对无状态bean使用单例作用域
        
定制Bean的性质----------
    生命周期回调
        Spring InitializingBean.afterPropertiesSet()和DisposableBean.destroy()
        @PostConstruct和@PreDestroy
        初始方法和销毁方法bean定义元adat
    BeanPostProcessor实现来处理它可以找到的任何回调接口并调用适当的方法
    启动和关闭生命周期回调：Lifecycle，LifecycleProcessor,SmartLifecycle
    在非web应用中优雅的关闭IoC容器
        ConfigurableApplicationContext.registerShutdownHook()
    感知接口：感知接口的方法有对被感知者的引用，即将被感知者类型作为参数类型。
        ApplicationContextAware,BeanNameAware，其他感知接口
        使用这些接口增加代码与spring的耦合，且不符合控制反转风格，建议仅用于需要对容器进行编程访问的基础设施bean
    
Bean定义继承-----------
    子Bean可以继承父Bean的属性值，也可以覆盖父Bean的值
    子bean定义继承父bean的范围、构造函数参数值、属性值和方法覆盖，并可以添加新值
    其余的设置总是来自子定义:depends, automtowire mode, dependency check, singleton和lazy init
    父Bean可以不指定类型，作为供子Bean继承的模板，但必须显示定义为抽象的
    即使父Bean指定了类型，若只想将其作为模板，也应该显示定义为抽象的，否则容器将会实例化父Bean
    引用抽象的父Bean，或通过父Bean id调用getBean()，都将返回错误
    
容器扩展点------------
    容器扩展指在Bean实例化前后操作Bean，意为扩展操作
    扩展点
        使用BeanPostProcessor扩展
            在容器实例化Bean前后，BeanPostProcessor执行方法
            需要在普通Bean之前处理，所有直接引用BeanPostProcessor的Bean都会在容器启动时直接实例化
        使用BeanFactoryPostProcessor扩展：操作bean配置元数据
        FactoryBean扩展：通过在id前加上&，getBean(“&myBean”)将返回FactoryBean实例本身
    实现BeanPostProcessor扩展的方式
        编程方式：addBeanPostProcessor()方法
            此方法的BeanPostProcessor实例不遵循有序规则，登记顺序决定执行顺序，且BeanPostProcessor均先于普通Bean被实例化
    实现Ordered接口，可以控制扩展点的执行顺序
    Spring提供的BeanPostProcessor实现
        AOP自动代理：由于AOP自动代理是BeanPostProcessor的实现，所以BeanPostProcessor和直接引用它的Bean都不适用自动代理
        RequiredAnnotationBeanPostProcessor：确保使用(任意)注释标记的bean上的JavaBean属性实际上(配置为)被注入了值的依赖关系
    Spring提供的BeanFactoryPostProcessor实现
        PropertySourcesPlaceholderConfigurer：读取指定路径文件，配合占位符使用
        PropertyOverrideConfigurer：可以覆盖xml中Bean定义的属性值，被覆盖值总是文字值，而不会被解析为Bean引用
        
        可以配置多个BeanPostProcessor实例，通过继承Order控制其执行顺序
        使用BeanFactoryPostProcessor自定义配置元数据
        
基于注解的容器配置----------------
    注解配置和xml配置的优缺点
        注解配置更简洁，但更接近源码
        xml配置更集中，可以在不修改源码和重新编译的情况下修改元数据，注释注入在XML注入之前执行。因此，XML配置将覆盖通过这两种方法连接的属性的注释
            类路径扫描找到的xml定义的bean或组件类，容器通常预先知道具体的类型
    描述：注释配置依赖字节码元数据来连接组件，通过使用相关类、方法或字段声明上的注释来将配置移动到组件类本身
    隐式注册
    @Required：应用于bean属性设置方法，spring 5.1已弃用
    @Autowired：
        适用范围
            构造函数：只有一个构造函数可以不使用@Auowired，多个构造函数且无默认构造函数时，必须使用@Autowired为容器指定一个构造函数
            setter方法：
            任意名称的多个参数的方法
            字段：若属性required = false，自动装配会忽略该属性
            数组字段：容器会提供该类型的所有Bean，可以控制数组中对象的顺序
            类型化映射实例，键类型必须是String，容器会提供值类型的所有Bean
            BeanFactory、ApplicationContext、Environment、ResourceLoader、ApplicationEventPublisher和MessageSource。这些接口及其扩展的接口，如ConfigurableApplicationContext或ResourcePatternResolver，都是自动解析的，不需要特殊设置
        属性
            required = false，不调用无匹配的注入点，保留默认值。默认自动装配未匹配到Bean时，则自动装配失败
                注入的构造函数和工厂方法参数是一个特殊情况，因为@Autowired中的required属性有不同的含义，这是由于Spring的构造函数解析算法可能潜在地处理多个构造函数
                默认情况下，构造函数和工厂方法参数是有效需要的，但在单构造函数场景中有一些特殊规则，比如如果没有匹配的bean，则多元素注入点(数组、集合、映射)解析为空实例
                多个构造函数使用@Autowired，一个保留required默认值true，其余都必须申明required = false
                通过匹配Spring容器中的bean可以满足的依赖项数量最多的构造函数将被选择。如果没有一个候选函数得到满足，那么将使用主/默认构造函数(如果存在的话)
                一种通用的实现模式：所有依赖项都可以在一个惟一的多参数构造函数中声明——例如，声明为一个没有@Autowired注释的单一公共构造函数
        自动装配的非必需性：不是不装配，而是在无匹配的情况下忽略，避免报错
            @Autowired(required = false)
            Optional<T>
            @Nullable
            
            
    @Autowired、@Inject、@Value和@Resource注释由Spring BeanPostProcessor实现处理。这意味着您不能在自己的BeanPostProcessor或BeanFactoryPostProcessor类型(如果有的话)中应用这些注释。这些类型必须通过使用XML或Spring @Bean方法显式“连接”起来
    
    
    
        
        
        
        

        
        
        
        
